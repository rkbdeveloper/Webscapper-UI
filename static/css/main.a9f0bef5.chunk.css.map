{"version":3,"sources":["webpack://src/index.css","webpack://src/styles/_reset.scss","webpack://src/styles/_variables.scss","webpack://src/styles/style.scss","webpack://src/styles/_functions.scss"],"names":[],"mappings":"AAAA,KACE,QAAS,CACT,mJAEY,CACZ,kCAAmC,CACnC,iCACF,CAEA,KACE,yEAEF,CCZA,EACI,QAAU,CACV,SAAW,CACd,KAGG,wBCF4B,CCEhC,aACI,WAAY,CACZ,YAAa,CAChB,aAGG,YAAa,CACb,aAAc,CACd,gBAAiB,CACjB,UAAW,CACX,WAAY,CALhB,kBAOQ,wBDfwB,CCgBxB,kBDXwB,CCYxB,UAAW,CACX,aDjBwB,CCkBxB,eAAgB,CACnB,KAID,YAAa,CADjB,eAGQ,wBAAyB,CACzB,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CACnB,SAAU,CACV,WAAY,CARpB,qBAUY,wBD/BmB,CCgCnB,cAAe,CAX3B,2BAeY,2BDjCoB,CCkCpB,8BDlCoB,CCkBhC,0BAoBY,4BDtCoB,CCuCpB,+BDvCoB,CCwCvB,cAKL,iBAAkB,CAClB,YAAa,CACb,gBAAiB,CAHrB,uBAMQ,iBAAkB,CAClB,KAAM,CACN,MAAO,CACP,UAAW,CACX,WAAY,CACZ,wBD9DoB,CC+DpB,WAAY,CACZ,aAAe,CACf,kBAAmB,CACnB,iBAAkB,CACrB,MAID,YAAa,CAChB,eAGG,cAAe,CACf,UAAY,CACf,OAKG,4BAA6B,CAC7B,kBAAmB,CAEtB,aALG,YAAa,CACb,qBASe,CALlB,MAKG,cAAe,CAHnB,YAMQ,mBAAoB,CACpB,kBAAmB,CACnB,yBAAA,CAAA,sBAAA,CAAA,iBAAkB,CAR1B,gBAUY,iBAAkB,CAV9B,yBAeQ,WAAY,CACZ,UAAW,CACX,WAAY,CACZ,4BAAuC,CAlB/C,+BAqBY,qBAAsB,CArBlC,kCA0BQ,wBAAyB,CA1BjC,8BA8BQ,wBAAyB,CA9BjC,mCAkCQ,wBAAyB,CAlCjC,kCAsCQ,wBAAyB,CAtCjC,sBA0CQ,iBAAkB,CAClB,UAAW,CACX,gBAAiB,CACjB,WAAY,CA7CpB,gBAkDQ,WAAY,CACZ,UAAW,CACd,iBAQD,sBAAuB,CAAvB,cAAuB,CACvB,iBAAA,CAAA,oBAAA,CAAA,YAAuB,CAF3B,qBAKQ,oBAAsB,CACtB,qBAAuB,CAC1B,yBAPL,iBAUQ,sBAAA,CAAA,cAAe,CAkBtB,CC6CG,yBDzEJ,iBAcQ,sBAAA,CAAA,cAAe,CActB,CC6CG,gDDzEJ,iBAkBQ,sBAAA,CAAA,cAAe,CAUtB,CC6CG,0BDzEJ,iBAsBQ,sBAAA,CAAA,cAAe,CAMtB,CC6CG,0BDzEJ,iBA0BQ,sBAAA,CAAA,cAAe,CAEtB","file":"main.a9f0bef5.chunk.css","sourcesContent":["body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","* {\n    margin : 0;\n    padding : 0;\n}\n\nbody{\n    background-color: $home-light-shade-color;\n}","\n$home-primary-color: #A2BDD0;\n$home-light-accent-color: #C4AAA5;\n$home-dark-accent-color: #8C8999;\n$home-light-shade-color: #FAF9FA;\n$home-dark-shade-color: #4C80A3;\n\n\n$main-header-border-radius: 15px;\n$border-radius: 25px;\n","@import 'variables';\n@import 'functions';\n@import 'animation';\n@import 'reset';\n\n\n.main-layout{\n    width: 100vw;\n    height: 100vh;\n}\n\n.main-header{\n    display: flex;\n    margin: 0 auto;\n    padding-top: 1rem;\n    width: 80vw;\n    height: 10vh;\n    .tab{\n        background-color: $home-dark-accent-color;\n        border-radius: $main-header-border-radius;\n        width: 100%;\n        color: $home-light-shade-color;\n        font-weight: 500;\n    }\n}\n\n.tab{\n    display: flex;\n    .tab-item{\n        text-transform: uppercase;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 25%;\n        height: 100%;\n        &:hover{\n            background-color: $home-dark-shade-color;\n            cursor: pointer;\n        }\n\n        &:first-child{\n            border-top-left-radius: $main-header-border-radius;\n            border-bottom-left-radius: $main-header-border-radius;\n        }\n\n        &:last-child{\n            border-top-right-radius: $main-header-border-radius;\n            border-bottom-right-radius: $main-header-border-radius;\n        }\n    }\n}\n\n.main-content{\n    position: relative;\n    display: flex;\n    padding-top: 2rem;\n    \n    .content{\n        position: absolute;\n        top: 1;\n        left: 1;\n        width: 98vw;\n        height: 75vh;\n        background-color: $home-primary-color;\n        padding: 5px;\n        margin: 0 0.5vw;\n        border-radius: 10px;\n        overflow-y: scroll;\n    }\n}\n\n.hide {\n    display: none;\n}\n\n.content.title{\n    font-size: 10em;\n    color: black;\n}\n\n.forms{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n\n}\n\n.link{\n    display: flex;\n    flex-direction: column;\n    margin: 1.1em 0;\n\n    label{\n        display: inline-flex;\n        align-items: center;\n        width: min-content;\n        img{\n            margin-right: 10px;\n        }\n    }\n\n    input[type=\"submit\"]{\n        border: none;\n        width: 26px;\n        height: 26px;\n        border-radius: $border-radius!important;\n\n        &:focus{\n            border: none!important;\n        }\n    }\n\n    input[name=\"facebook-button\"]{\n        background-color: #4B588F;\n    }\n    \n    input[name=\"mega-button\"]{\n        background-color: #C32929;\n    }\n    \n    input[name=\"instagram-button\"]{\n        background-color: #A62D7E;\n    }\n    \n    input[name=\"snapchat-button\"]{\n        background-color: #F2E24B;\n    }\n\n    input[type=\"url\"]{\n        border-radius: 5px;\n        margin: 2px;\n        border-width: 1px;\n        height: 27px;\n        \n    }\n\n    .link-img{\n        height: 25px;\n        width: 25px;\n    }\n    \n}\n\n\n\n\n.data-collection {\n    column-count:         5;\n    column-gap:           0;  \n\n    img{\n        width: 100% !important;\n        height: auto !important;\n    }\n\n    @include media(\"<=phone\") {\n        column-count: 1;\n    }\n    \n    @include media(\">phone\") {\n        column-count: 3;    \n    }\n\n    @include media(\">=815px\", \"<desktop\") {\n        column-count: 3;  \n    }\n\n    @include media(\">=desktop\") {\n        column-count: 3;\n    }\n\n    @include media(\">desktop\") {\n        column-count: 6;\n    }\n}\n\n\n\n","\n$breakpoints: (\n    'phone': 320px, \n    'tablet': 768px, \n    'desktop': 1024px\n  ) !default;\n  \n  $media-expressions: (\n    'screen': 'screen', \n    'print': 'print', \n    'handheld': 'handheld',\n    'retina2x': (\n      '(-webkit-min-device-pixel-ratio: 2)', \n      '(min-resolution: 192dpi)'\n    ), \n    'retina3x': (\n      '(-webkit-min-device-pixel-ratio: 3)', \n      '(min-resolution: 350dpi)'\n    )\n  ) !default;\n  \n  $unit-intervals: (\n    'px': 1, \n    'em': 0.01, \n    'rem': 0.1\n  ) !default;\n\n\n@function get-query-branches($expressions) {\n    $result: '';\n    $has-groups: false;\n  \n    // Getting initial snapshot and looking for groups\n    @each $expression in $expressions {\n      @if (str-length($result) != 0) {\n        $result: $result + ' and ';\n      }\n  \n      @if (type-of($expression) == 'string') {\n        $result: $result + $expression;\n      } @else if (type-of($expression) == 'list') {\n        $result: $result + nth($expression, 1);\n        $has-groups: true;\n      } @else {\n        @warn '#{$expression} is not a valid expression.';\n      }\n    }\n  \n    // If we have groups, we have to create all possible combinations\n    @if $has-groups {\n      @each $expression in $expressions {\n        @if (type-of($expression) == 'list') {\n          $first: nth($expression, 1);\n  \n          @each $member in $expression {\n            @if ($member != $first) {\n              @each $partial in $result {\n                $result: join($result, str-replace-first($first, $member, $partial));\n              }\n            }\n          }\n        }\n      }\n    }\n  \n    @return $result;\n  }\n\n  @function parse-expression($expression) {\n    $operator: '';\n    $value: '';\n    $element: '';\n    $result: '';\n    $is-width: true;\n  \n    @if (type-of($expression) != 'string') {\n      @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\n    }\n  \n    // Separating the operator from the rest of the expression\n    @if (str-slice($expression, 2, 2) == '=') {\n      $operator: str-slice($expression, 1, 2);\n      $value: str-slice($expression, 3);\n    } @else {\n      $operator: str-slice($expression, 1, 1);\n      $value: str-slice($expression, 2);\n    }\n  \n    // Checking what type of expression we're dealing with\n    @if map-has-key($breakpoints, $value) {\n      $result: map-get($breakpoints, $value);\n    } @else if map-has-key($media-expressions, $expression) {\n      $result: map-get($media-expressions, $expression);\n      $is-width: false;\n    } @else {\n      $result: to-number($value);\n    }\n  \n    @if ($is-width) {\n      $unit: unit($result);\n      $interval: 0;\n      \n      @if (map-has-key($unit-intervals, $unit)) {\n        $interval: map-get($unit-intervals, $unit);\n      } @else {\n        @warn 'Unknown unit: #{$unit}';\n      } \n         \n      @if ($operator == '>') {\n        $element: '(min-width: #{$result + $interval})';\n      } @else if ($operator == '<') {\n        $element: '(max-width: #{$result - $interval})';\n      } @else if ($operator == '>=') {\n        $element: '(min-width: #{$result})';\n      } @else if ($operator == '<=') {\n        $element: '(max-width: #{$result})';\n      } @else {\n        @warn '#{$expression} is missing an operator.';\n      }\n    } @else {\n      $element: $result;\n    }\n  \n    @return $element;\n  }\n\n\n  @function str-replace-first($search, $replace, $subject) {\n    $search-start: str-index($subject, $search);\n  \n    @if $search-start == null {\n      @return $subject;\n    }\n  \n    $result: str-slice($subject, 0, $search-start - 1);\n    $result: $result + $replace;\n    $result: $result + str-slice($subject, $search-start + str-length($search));\n  \n    @return $result;\n  }\n\n  @function to-number($string) {\n    // Matrices\n    $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';\n    $numbers:  0   1   2   3   4   5   6   7   8   9;\n    \n    // Result\n    $result: 0;\n    $divider: 0;\n    $minus: false;\n  \n    // Looping through all characters\n    @for $i from 1 through str-length($string) {\n      $character: str-slice($string, $i, $i);\n      $index: index($strings, $character);\n      \n    \n      @if $character == '-' {\n        $minus: true;\n      }\n      \n      @else if $character == '.' {\n        $divider: 1;\n      }\n      \n      @else {\n        @if type-of($index) != 'number' {\n          $result: if($minus, $result * -1, $result);\n          @return _length($result, str-slice($string, $i));\n        }\n  \n        $number: nth($numbers, $index);\n        \n        @if $divider == 0 {\n          $result: $result * 10;\n        }\n        \n        @else {\n          // Move the decimal dot to the left\n          $divider: $divider * 10;\n          $number: $number / $divider;\n        }\n        \n        $result: $result + $number;\n      }\n    }\n    \n    @return if($minus, $result * -1, $result);\n  }\n  \n  @function _length($number, $unit) {\n    $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';\n    $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;\n    $index: index($strings, $unit);\n    \n    @if type-of($index) != 'number' {\n      @warn 'Unknown unit `#{$unit}`.';\n      @return false;\n    }\n    \n    @return $number * nth($units, $index);\n  }\n\n\n@mixin media($conditions...) {\n    @for $i from 1 through length($conditions) {\n        $conditions: set-nth($conditions, $i, parse-expression(nth($conditions, $i)));\n    }\n\n    $branches: get-query-branches($conditions);\n    $query: '';\n\n    @each $branch in $branches {\n        @if (str-length($query) != 0) {\n        $query: $query + ', ';\n        }\n\n        $query: $query + $branch;\n    }\n\n    @media #{$query} {\n        @content;\n    }\n}"]}